-- --Write a query to list all students who enrolled in the current year.

SELECT 
    student_id,
    first_name,
    last_name,
    age,
    gender,
    enrollment_date
FROM
    Students
WHERE
    YEAR(enrollment_date) = '2023';

-- Retrieve the list of all unique courses.

SELECT DISTINCT
    course_name, course_id
FROM
    courses;

-- Find the names of all students who are 18 years or older

SELECT 
    *
FROM
    students
WHERE
    age >= 18;

-- Find the average age of students enrolled in each course.

SELECT 
    ROUND(AVG(age), 0), courses.course_name
FROM
    students
        JOIN
    enrollments ON students.student_id = enrollments.student_id
        JOIN
    courses ON courses.course_id = enrollments.course_id
GROUP BY courses.course_name;

-- Write a query to calculate the total number of students in each department taught by each instructor.

SELECT 
    i.first_name,
    i.last_name,
    i.instructor_id,
    i.department,
    COUNT(e.student_id) AS total_number
FROM
    enrollments e
        JOIN
    instructors i ON i.instructor_id = e.instructor_id
GROUP BY i.department , i.instructor_id , i.first_name , i.last_name;

-- List the  highest, and lowest grades for each course.

SELECT 
    c.course_name, MIN(grade) AS lowest, MAX(grade) AS highest
FROM
    enrollments e
        JOIN
    courses c ON e.course_id = c.course_id
GROUP BY c.course_name;

-- Retrieve a list of students and the courses they are enrolled in.

SELECT 
    s.student_id, s.first_name, s.last_name, c.course_name
FROM
    enrollments e
        JOIN
    students s ON e.student_id = s.student_id
        JOIN
    courses c ON c.course_id = e.course_id
ORDER BY student_id;

-- Write a query to display the student names along with the names of their instructors.

SELECT 
    s.student_id,
    s.first_name AS Student_name,
    i.first_name AS instructor_name
FROM
    students s
        JOIN
    enrollments e ON e.student_id = s.student_id
        JOIN
    instructors i ON i.instructor_id = e.instructor_id
ORDER BY s.student_id;

-- List all students and their grades for courses taught by a specific instructor.

SELECT 
    s.first_name, c.course_name, i.first_name, e.grade
FROM
    students s
        JOIN
    enrollments e ON e.student_id = s.student_id
        JOIN
    courses c ON c.course_id = e.course_id
        JOIN
    instructors i ON i.instructor_id = e.instructor_id;
    
    -- Display the names of instructors who are teaching more than 2 student.

SELECT 
    e.instructor_id,
    i.first_name,
    i.department,
    COUNT(student_id) total_students
FROM
    enrollments e
        JOIN
    instructors i ON e.instructor_id = i.instructor_id
GROUP BY instructor_id
HAVING total_students >= 2;

-- List the names of all students enrolled in the course with the highest number of enrollments.

SELECT 
    s.first_name, s.last_name
FROM
    enrollments e
        JOIN
    students s ON e.student_id = s.student_id
WHERE
    e.course_id = (SELECT 
            course_id
        FROM
            enrollments
        GROUP BY course_id
        ORDER BY COUNT(student_id) DESC
        LIMIT 1);


-- Write a query to find the course in which the highest  grade was awarded.

SELECT 
    c.course_name, MIN(grade) AS highest_grade
FROM
    enrollments e
        JOIN
    courses c ON e.course_id = c.course_id
GROUP BY c.course_name
HAVING highest_grade = 'A'
ORDER BY highest_grade;

-- Find the courses where more then three student have been enrolled with thier name 

SELECT 
    c.course_name, COUNT(e.student_id) AS total_student
FROM
    enrollments e
        JOIN
    courses c ON c.course_id = e.course_id
        JOIN
    students s ON e.student_id = s.student_id
GROUP BY c.course_name
HAVING COUNT(e.student_id) >= 3;

-- Retrieve the top 2 students with the highest grades in each course.


SELECT 
    *,
    CASE
        WHEN grade = 'A' THEN 1
        WHEN grade = 'B' THEN 2
        WHEN grade = 'c' THEN 3
        ELSE 0
    END AS number_grade
FROM
    (SELECT 
        s.student_id, s.first_name, c.course_name, e.grade
    FROM
        enrollments e
    JOIN students s ON s.student_id = e.student_id
    JOIN courses c ON e.course_id = c.course_id) a
HAVING number_grade <= 2;

-- Write a query to show the students who have the lowest grade in their respective courses.  

WITH RankedGrades AS (
    SELECT 
        e.course_id,
        s.student_id,
        s.first_name,
        s.last_name,
        e.grade,
        RANK() OVER (
            PARTITION BY e.course_id 
            ORDER BY 
                CASE e.grade
                    WHEN 'A' THEN 1
                    WHEN 'B' THEN 2
                    WHEN 'C' THEN 3
                    WHEN 'D' THEN 4
                    WHEN 'F' THEN 5
                END DESC
        ) AS grade_rank
    FROM 
        Enrollments e
    JOIN 
        Students s ON e.student_id = s.student_id
)

SELECT 
    course_id,
    student_id,
    first_name,
    last_name,
    grade
FROM 
    RankedGrades
WHERE 
    grade_rank = 1
ORDER BY 
    course_id;


